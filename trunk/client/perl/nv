#!/usr/bin/perl
##############################################################################
# A client to query a nVentory server
##############################################################################

use strict;
use warnings;
use Getopt::Long;
use nVentory::Client;

# Ensure we have a sane path, particularly since we might be run from
# cron in registration mode.
$ENV{PATH} = '/bin:/usr/bin:/sbin:/usr/sbin';
my $client_version = '@@VERSION@@';

#
# Process command line options
#

sub usage
{
	die <<EOF;
Usage: nv
    [--objecttype object]
       The type of object to get/set.  Defaults to nodes.
    [--get field=value1[,value2]]
    [--showtags, Lists all tags the node(s) belongs to]
    [--regexget field=value1,[value2]]
       Select objects for display or updating, may be specified multiple
       times to search on multiple fields.  get does a substring match,
       regexget does a regex match.  Multiple values for an individual
       field can be specified seperated by commas.
    [--exactget field=value1,[value2]]
       Select objects for display or updating, may be specified multiple
       times to search on multiple fields.  get does a substring match,
       exactget does an exact match.  Multiple values for an individual
       field can be specified seperated by commas.
    [--exclude field=value1,[value2]]
       Excludes substring from potential matches from get/exactget/regexget.
       Multiple values for an individual field can be specified seperated by commas.
    [--and field=value1,[value2]]
       Includes substring from potential matches from get/exactget/regexget.
       Multiple values for an individual field can be specified seperated by commas.
    [--name value[,value2]]
       Shortcut for --get name=value
    [--withaliases]
       When searching by name, search aliases as well. (doesn't work with exactget nor regexget)
    [--allfields [excludefield1[,excludefield2]]]
       Display all fields for selected objects.
       One or more fields may be specified to be excluded from the
       query, seperate multiple fields with commas.
    [--fields field1[,field2]]
       Display the specified fields for selected objects.
       One or more fields may be specified, either by specifying this
       option multiple times or by seperating the field names with
       commas.
    [--set field=value]
       Update fields in objects selected via get/exactget, may be
       specified multiple times to update multiple fields.
    [--yes]
       Don't prompt for set confirmation
    [--getfieldnames]
       Shows get/set fields supported by server
    [--getallvalues field1[,field2]]
       Display all values stored in the database for the specified fields
    [--nodegroup | --ng nodegroup]
       Display the members of the given node group, member groups are
       displayed as groups and are not expanded
    [--get_nodegroup_nodes | --get_ngn | --getnodegroupnodes nodegroup]
       Display all the members of the given node group including virtuals
    [--nodegroupexpanded | --nge nodegroup]
       Same as --get_nodegroup_nodes
    [--createnodegroup nodegroup1[,nodegroup2]]
       Create one or more node groups
    [--addtonodegroup nodegroup1[,nodegroup2]]
       Add nodes selected via get/exactget to a node group, may be
       specified multiple times to add to multiple groups
    [--addcomment "some text for comment"]
       Add comment to object
    [--removefromnodegroup nodegroup1[,nodegroup2]]
       Remove nodes selected via get/exactget from a node group, may be
       specified multiple times to remove from multiple groups
    [--addnodegrouptonodegroup child_group,parent_group]
       Takes two node group names seperated by a comma, adds the first
       node group to the second
    [--removenodegroupfromnodegroup child_group,parent_group]
       Takes two node group names seperated by a comma, removes the first
       node group from the second
    [--createtag tag1[,tag2]]
       Create a tag by name
    [--addtagtonodegroup tag,node_group]
       Add a tag to a node_group
    [--removetagfromnodegroup tag,node_group]
       Remove a tag from a node_group
    [--register]
       Gather as much information as possible about the local machine
       and register that information into the nVentory database.
    [--username]
       Username to use when authenticating to the server.  If not
       specified defaults to the current user.
    [--delete]
       Delete objects 
    [--server]
       Specify nventory server if different than the default
    [--debug]
    [--dry-run]
    [--no-switchport]
        Skip switch port detection
    [--no-storage]
        Skip storage detection
    [--help]
    [--version]

All options can be shortened to anything that's unique.
EOF
}

my $objecttype;
my $object;
my %get;
my %exactget;
my %regexget;
my %exclude;
my %and;
my @name;
my @allfields;
my @fields;
my %set;
my $yes;
my $getfieldnames;
my @getallvalues;
my $nodegroup;
my @nodegroupexpanded;
my @get_nodegroup_nodes;
my @createnodegroup;
my @addtonodegroup;
my $addcomment;
my @removefromnodegroup;
my $addnodegrouptonodegroup;
my $removenodegroupfromnodegroup;
my @createtag;
my $addtagtonodegroup;
my $removetagfromnodegroup;
my $register;
my $server;
my $username = $ENV{LOGNAME};
my $delete;
my $showtags;
my $withaliases;
my $debug;
my $dryrun;
my $nocdpr;
my $nolshw;
my $help;
my $version;
my $getopt = GetOptions(
	'objecttype:s' => \$objecttype,
	'get:s' => \%get,
	'exactget:s' => \%exactget,
	'regexget:s' => \%regexget,
	'exclude:s' => \%exclude,
	'and:s' => \%and,
	'name=s' => \@name,
	'allfields:s' => \@allfields,
	'fields=s' => \@fields,
	'set=s' => \%set,
	'yes' => \$yes,
	'getfieldnames' => \$getfieldnames,
	'getallvalues=s' => \@getallvalues,
	'nodegroup|ng=s' => \$nodegroup,
	'nodegroupexpanded|nge=s' => \@nodegroupexpanded,
	'get_nodegroup_nodes|get_ngn|getnodegroupnodes=s' => \@get_nodegroup_nodes,
	'createnodegroup=s' => \@createnodegroup,
	'addtonodegroup=s' => \@addtonodegroup,
	'addcomment:s' => \$addcomment,
	'removefromnodegroup=s' => \@removefromnodegroup,
	'addnodegrouptonodegroup=s' => \$addnodegrouptonodegroup,
	'removenodegroupfromnodegroup=s' => \$removenodegroupfromnodegroup,
	'createtags=s' => \@createtag,
        'addtagtonodegroup=s' => \$addtagtonodegroup,
        'removetagfromnodegroup=s' => \$removetagfromnodegroup,
	'username=s' => \$username,
	'register' => \$register,
        'delete' => \$delete,
        'showtags' => \$showtags,
        'withaliases' => \$withaliases,
        'server:s' => \$server,
	'debug' => \$debug,
	'dry-run' => \$dryrun,
        'no-switchport' => \$nocdpr,
        'no-storage' => \$nolshw,
	'help' => \$help,
	'version' => \$version,
);
if ( $version )
{
  print $client_version . "\n";
  exit;
}
usage() unless ($getopt);
usage() if ($help);
usage() unless (
	%get || %exactget || %regexget || @name || $getfieldnames || @getallvalues || $register || $nodegroup || @nodegroupexpanded || @get_nodegroup_nodes || @createnodegroup || $addnodegrouptonodegroup || $removenodegroupfromnodegroup || @createtag || $addtagtonodegroup || $removetagfromnodegroup );
# These options are mutually exclusive
usage() if (@allfields && @fields);
usage() if ( %set && $delete );
usage() if ($getfieldnames && (%get || %exactget || %regexget || @name));
usage() if (@getallvalues && (%get || %exactget || %regexget || @name));
# FIXME: Should support searches on node group membership and other characteristics
usage() if (($nodegroup || @nodegroupexpanded || @get_nodegroup_nodes) && (%get || %exactget || %regexget || %exclude || @name || %and));
usage() if ($register && (%get || %exactget || %regexget || %exclude || %and || @name || $getfieldnames || @getallvalues || $nodegroup || @nodegroupexpanded || @get_nodegroup_nodes || @createnodegroup || $addnodegrouptonodegroup || $removenodegroupfromnodegroup || @createtag || $addtagtonodegroup || $removetagfromnodegroup ));
# Enable aliases searching  when used with a 'name' field search and only with 'get' (no exactget nor regexpget)
if ($withaliases) {
  if (%get) {
    foreach my $key (keys %get) {
      usage() unless ($key =~ /\[name\]/ || $key eq 'name');
    }
    $get{'enable_aliases'} = 1;
  }
}

$objecttype = 'nodes' if (!$objecttype);

die "--showtags can only be used when searching objecttype nodes or node_groups" if ($showtags && ($objecttype !~ /^(nodes|node_groups)$/));

# allfields might contain comma-seperated fields
# But there's the special case that allfields might contain just one
# zero-length element, indicating that it was specified on the command
# line with no fields to exclude.  So don't split in that case, as split
# will discard that empty field.
unless (scalar @allfields == 1 && $allfields[0] eq '')
{
	@allfields = split(/,/, join(',', @allfields));
}
# fields might contain comma-seperated fields
@fields = split(/,/, join(',', @fields));
# getallvalues might contain comma-seperated fields
@getallvalues = split(/,/, join(',', @getallvalues));
# nodegroupexpanded might contain comma-seperated fields
@nodegroupexpanded = split(/,/, join(',', @nodegroupexpanded));
# get_nodegroup_nodes might contain comma-seperated fields
@get_nodegroup_nodes = split(/,/, join(',', @get_nodegroup_nodes));
# createnodegroup might contain comma-seperated fields
@createnodegroup = split(/,/, join(',', @createnodegroup));
@createtag = split(/,/, join(',', @createtag));
# addtonodegroup might contain comma-seperated fields
@addtonodegroup = split(/,/, join(',', @addtonodegroup));
# removefromnodegroup might contain comma-seperated fields
@removefromnodegroup = split(/,/, join(',', @removefromnodegroup));

# get/exactget/regexget/exclude might contain comma-seperated values for fields
foreach my $field (keys %get)
{
	my @values = split /,/, $get{$field};
	$get{$field} = \@values;
}
foreach my $field (keys %exactget)
{
	my @values = split /,/, $exactget{$field};
	$exactget{$field} = \@values;
}
foreach my $field (keys %regexget)
{
	my @values = split /,/, $regexget{$field};
	$regexget{$field} = \@values;
}
foreach my $field (keys %exclude)
{
	my @values = split /,/, $exclude{$field};
	$exclude{$field} = \@values;
}
foreach my $field (keys %and)
{
	my @values = split /,/, $and{$field};
	$and{$field} = \@values;
}

# addnodegrouptonodegroup must contain comma-seperated fields if specified
my @addnodegrouptonodegroup;
if ($addnodegrouptonodegroup)
{
	@addnodegrouptonodegroup = split(/,/, $addnodegrouptonodegroup, 2);
	usage() if (!$addnodegrouptonodegroup[0] || !$addnodegrouptonodegroup[1])
}
# removenodegroupfromnodegroup must contain comma-seperated fields if specified
my @removenodegroupfromnodegroup;
if ($removenodegroupfromnodegroup)
{
	@removenodegroupfromnodegroup = split(/,/, $removenodegroupfromnodegroup, 2);
	usage() if (!$removenodegroupfromnodegroup[0] || !$removenodegroupfromnodegroup[1])
}
my @addtagtonodegroup;
if ($addtagtonodegroup)
{
	@addtagtonodegroup = split(/,/, $addtagtonodegroup, 2);
	if (!$addtagtonodegroup[0] || !$addtagtonodegroup[1])
	{
		die "Syntax Error.  You must specify --addtagtonodegroup tag_name,node_group_name";
	}
}
my @removetagfromnodegroup;
if ($removetagfromnodegroup)
{
	@removetagfromnodegroup = split(/,/, $removetagfromnodegroup, 2);
	if (!$removetagfromnodegroup[0] || !$removetagfromnodegroup[1])
	{
		die "Syntax Error.  You must specify --removetagfromnodegroup tag_name,node_group_name";
	}
}

if (@name)
{
	$get{name} = \@name;
}

my %SEARCH_SHORTCUTS = (
	'hw' => 'hardware_profile[name]',
	'hwmanuf' => 'hardware_profile[manufacturer]',
	'hwmodel' => 'hardware_profile[model]',
	'ip' => 'ip_addresses[address]',
	'ips' => 'ip_addresses[address]',
	'mac' => 'network_interfaces[hardware_address]',
	'macs' => 'network_interfaces[hardware_address]',
	'nic' => 'network_interfaces[name]',
	'nics' => 'network_interfaces[name]',
	'node_group' => 'node_group[name]',
	'node_groups' => 'node_groups[name]',
	'os' => 'operating_system[name]',
	'osvendor' => 'operating_system[vendor]',
	'osvariant' => 'operating_system[variant]',
	'osver' => 'operating_system[version_number]',
	'osversion' => 'operating_system[version_number]',
	'osarch' => 'operating_system[architecture]',
	'serial' => 'serial_number',
	'status' => 'status[name]',
);

# Convert any shortcut names to their full names
foreach my $key (keys %get)
{
	if (exists $SEARCH_SHORTCUTS{$key})
	{
		$get{$SEARCH_SHORTCUTS{$key}} = $get{$key};
		delete $get{$key};
	}
}
foreach my $key (keys %exactget)
{
	if (exists $SEARCH_SHORTCUTS{$key})
	{
		$exactget{$SEARCH_SHORTCUTS{$key}} = $exactget{$key};
		delete $exactget{$key};
	}
}
foreach my $key (keys %regexget)
{
	if (exists $SEARCH_SHORTCUTS{$key})
	{
		$get{$SEARCH_SHORTCUTS{$key}} = $regexget{$key};
		delete $regexget{$key};
	}
}
foreach my $key (keys %exclude)
{
	if (exists $SEARCH_SHORTCUTS{$key})
	{
		$exclude{$SEARCH_SHORTCUTS{$key}} = $exclude{$key};
		delete $exclude{$key};
	}
}
foreach my $key (keys %and)
{
	if (exists $SEARCH_SHORTCUTS{$key})
	{
		$and{$SEARCH_SHORTCUTS{$key}} = $and{$key};
		delete $and{$key};
	}
}
foreach my $key (keys %set)
{
	if (exists $SEARCH_SHORTCUTS{$key})
	{
		$set{$SEARCH_SHORTCUTS{$key}} = $set{$key};
		delete $set{$key};
	}
}
for (my $i=0; $i<scalar(@allfields); $i++)
{
	if (exists $SEARCH_SHORTCUTS{$allfields[$i]})
	{
		$allfields[$i] = $SEARCH_SHORTCUTS{$allfields[$i]};
	}
}
for (my $i=0; $i<scalar(@fields); $i++)
{
	if (exists $SEARCH_SHORTCUTS{$fields[$i]})
	{
		$fields[$i] = $SEARCH_SHORTCUTS{$fields[$i]};
	}
	if ( $fields[$i] =~ /\b(node_rack|rack)\b/i ) 
	{
		$fields[$i] = 'node_rack_node_assignment[node_rack][name]',
	}
	if ( $fields[$i] =~ /\bdatacenter\b/i )
	{
        	$fields[$i] = 'node_rack_node_assignment[node_rack][datacenter_node_rack_assignment][datacenter][name]',
	}
}

if ($debug)
{
	warn "Enabling debug mode\n";
	nVentory::Client::setdebug(1);
	CONFIGFILE: foreach my $configfile ('/etc/nventory.conf', $ENV{HOME}.'/.nventory.conf')
	{
	        if (-f $configfile)
	        {
	                open my $configfh, '<', $configfile or next CONFIGFILE;
	                while (<$configfh>)
	                {
	                        next if (/^\s*$/);  # Skip blank lines
	                        next if (/^\s*#/);  # Skip comments
	                        chomp;
	                        my ($key, $value) = split /\s*=\s*/, $_, 2;
	                        if ($key eq 'server')
	                        {
	                                warn "Using server $value from $configfile\n";
	                        }
	                        elsif ($key eq 'proxy_server')
	                        {
	                                warn "Using proxy server $value from $configfile\n";
	                        }
	                        elsif ($key eq 'ca_file' && -f $value)
	                        {
	                                warn "Using CA file $value from $configfile\n";
	                        }
	                        elsif ($key eq 'ca_path' && -d $value)
	                        {
	                                warn "Using CA directory $value from $configfile\n";
	                        }
	                }
	                close $configfh;
	        }
	}
}

if ($dryrun)
{
	nVentory::Client::setdryrun(1);
}
if ($delete)
{
	nVentory::Client::setdelete(1);
}
if ($server)
{
	nVentory::Client::setserver($server);
}
#
# Perform requested actions
#

# First handle the standalone actions where we perform a single
# operation and exit.

if ($getfieldnames)
{
	my @field_names = nVentory::Client::get_field_names($objecttype);
	foreach my $field_name_entry (@field_names)
	{
		my ($field_name) = split(' ', $field_name_entry);
		my ($shortcut, $shortcut_field_name);
		while (($shortcut, $shortcut_field_name) = each %SEARCH_SHORTCUTS)
		{
			if ($field_name eq $shortcut_field_name)
			{
				$field_name_entry .= " ($shortcut)"
			}
		}
		print $field_name_entry, "\n";
	}
	exit;
}
if ($register)
{
        $nocdpr = 0 unless $nocdpr;
        $nolshw = 0 unless $nolshw;
        my %params;
        $params{nocdpr} = $nocdpr;
        $params{nolshw} = $nolshw;
        nVentory::Client::register(\%params);
        exit;
}
if ($nodegroup)
{
	my %results = nVentory::Client::get_objects('node_groups', {}, {'name' => [$nodegroup]}, {}, {}, {}, ['child_groups', 'nodes']);
        if (scalar keys(%results) == 0)
	{
		print "No matches for '$nodegroup'\n";
	}
	else
	{	
	        print "Child groups:\n";
		if ($results{$nodegroup}->{child_groups})
		{
			foreach my $child_group (sort { $a->{name} cmp $b->{name} } @{$results{$nodegroup}->{child_groups}})
			{
				print '  ', $child_group->{name}, "\n";
			}
		}
		else
		{
			print "\n";
		}
	        print "=====================\n";
		print "Real Nodes:\n";
		if ($results{$nodegroup}->{real_nodes_names})
		{
	        	my @realnodes = split(/,/, $results{$nodegroup}->{real_nodes_names});
			foreach my $node (sort { $a cmp $b } @realnodes)
			{
				print '  ', $node, "\n";
			}
		}
		else
		{
			print "\n";
		}
	        print "=====================\n";
		print "Virtual Nodes:\n";
		if ($results{$nodegroup}->{virtual_nodes_names})
		{
	        	my @virtualnodes = split(/,/, $results{$nodegroup}->{virtual_nodes_names});
			foreach my $node (sort { $a cmp $b } @virtualnodes)
			{
				print '  ', $node, "\n";
			}
		}
		else
		{
			print "\n";
		}
        }
	exit;
}
if (@createnodegroup)
{
	foreach my $newgroup (@createnodegroup)
	{
		nVentory::Client::set_objects('node_groups', undef, {'name' => $newgroup}, $username, \&get_password);
	}
	exit;
}
if ($addnodegrouptonodegroup)
{
	my %child_results = nVentory::Client::get_objects('node_groups', {}, {'name' => [$addnodegrouptonodegroup[0]]}, {}, {}, {});
	die "Child group '$addnodegrouptonodegroup[0]' not found for 'addnodegrouptonodegroup'\n" if (scalar keys %child_results != 1);
	my %parent_results = nVentory::Client::get_objects('node_groups', {}, {'name' => [$addnodegrouptonodegroup[1]]}, {}, {}, {}, ['child_groups']);	
	die "Parent group '$addnodegrouptonodegroup[1]' not found for 'addnodegrouptonodegroup'\n" if (scalar keys %parent_results != 1);
	nVentory::Client::add_nodegroups_to_nodegroups(\%child_results, \%parent_results, $username, \&get_password);
	exit;
}
if ($removenodegroupfromnodegroup)
{
	my %child_results = nVentory::Client::get_objects('node_groups', {}, {'name' => [$removenodegroupfromnodegroup[0]]} ,{}, {}, {});
	die "Child group '$removenodegroupfromnodegroup[0]' not found for 'removenodegroupfromnodegroup'\n" if (scalar keys %child_results != 1);
	my %parent_results = nVentory::Client::get_objects('node_groups', {}, {'name' => [$removenodegroupfromnodegroup[1]]}, {}, {}, {}, ['child_groups']);	
	die "Parent group '$removenodegroupfromnodegroup[1]' not found for 'removenodegroupfromnodegroup'\n" if (scalar keys %parent_results != 1);
	nVentory::Client::remove_nodegroups_from_nodegroups(\%child_results, \%parent_results, $username, \&get_password);
	exit;
}

if (@createtag)
{
	foreach my $tag (@createtag)
	{
		nVentory::Client::set_objects('tags', undef, {'name' => $tag}, $username, \&get_password);
	}
	exit;
}
if ($addtagtonodegroup)
{
	my %node_groups = nVentory::Client::get_objects('node_groups', {}, {'name' => [$addtagtonodegroup[1]]}, {}, {}, {});
	die "node group '$addtagtonodegroup[1]' not found for 'addtagtonodegroup'\n" if (scalar keys %node_groups != 1);
	nVentory::Client::add_tags_to_node_groups(\%node_groups, $addtagtonodegroup[0], $username, \&get_password);
	exit;
}
if ($removetagfromnodegroup)
{
	my %node_groups = nVentory::Client::get_objects('node_groups', {}, {'name' => [$removetagfromnodegroup[1]]}, {}, {}, {});
	die "node group '$removetagfromnodegroup[1]' not found for 'removetagfromnodegroup'\n" if (scalar keys %node_groups != 1);
	nVentory::Client::remove_tags_from_node_groups(\%node_groups, $removetagfromnodegroup[0], $username, \&get_password);
	exit;
}

# Now handle the general case where we fetch a list of objects and then
# perform operations on them.

sub toomany
{
	die <<EOF;
** Too many results returned **
'--allfields' can only be used up to 10 objects at a time.
Please narrow your search.
EOF
}

# If the user has requested data which lies outside the base object model
# then we need to tell the server to include that data in the results it
# sends us.
# For example, in a 'nodes' search the user requests the
# 'hardware_profile[name]' field then we need to request that
# 'hardware_profile' data be included in the results.
my @includes;
if (@fields)
{
	my %includes;
	foreach my $field (@fields)
	{
		if ($field =~ /(.*)\[.+\]/)
		{
			my $tmpfield = $1;
			$tmpfield =~ s/\]\[/:/g;
 			$tmpfield =~ s/\[/:/g;
 			$tmpfield =~ s/\]//g;
			$includes{$tmpfield} = 1;
		}
	}
	@includes = sort keys %includes;
}
elsif (@allfields)
{
	my %includes;
	my %allfields_results;
	%allfields_results= nVentory::Client::get_objects($objecttype, \%get, \%exactget, \%regexget, \%exclude, \%and, []);
        toomany() if ( (keys %allfields_results) > 10 );
	my @field_names = nVentory::Client::get_field_names($objecttype);
	foreach my $field_name_entry (@field_names)
	{
		my ($field_name) = split(' ', $field_name_entry);
		if ($field_name =~ /([^[]+)\[.+\]/)
		{
			$includes{$1} = 1;
		}
	}
	@includes = sort keys %includes;
}

my %results;
my @names;
if (%get || %exactget || %regexget )
{
	if ($showtags)
	{
		if (grep /^node_groups$/, @includes)
		{
			my @tmp;
			foreach my $inc (@includes) 
			{
				push(@tmp, $inc) unless ($inc eq 'node_groups');
			}
			@includes = @tmp;
		}
		if ($objecttype eq 'nodes')
		{
			push(@includes, 'node_groups[tags]') ;
			push(@fields, 'node_groups[name]') unless grep(/^node_groups\[name\]$/, @fields);
			push(@fields, 'node_groups[tags][name]') unless grep(/^node_groups\[tags\]\[name\]$/, @fields);
		}
		elsif ($objecttype eq 'node_groups')
		{
			push(@includes, 'tags') ;
			push(@fields, 'tags[name]') unless grep(/^tags\[name\]$/, @fields);
		}
	}
	%results = nVentory::Client::get_objects($objecttype, \%get, \%exactget, \%regexget, \%exclude, \%and, \@includes);
	@names = sort keys %results;
}
if (@nodegroupexpanded)
{
	my %names;
	foreach my $nge (@nodegroupexpanded)
	{
		foreach my $name (nVentory::Client::get_expanded_nodegroup($nge))
		{
			$names{$name} = 1;
		}
	}
	@names = sort keys %names;
	if (@allfields || @fields || @getallvalues)
	{
		%results = nVentory::Client::get_objects(
			'nodes', {}, { 'name' => \@names }, {}, {}, {}, \@includes);
	}
}
if (@get_nodegroup_nodes)
{
	my %names;
	foreach my $nge (@get_nodegroup_nodes)
	{
		foreach my $name (nVentory::Client::get_expanded_nodegroup($nge))
		{
			$names{$name} = 1;
		}
	}
	@names = sort keys %names;
	if (@allfields || @fields || @getallvalues)
	{
		%results = nVentory::Client::get_objects(
			'nodes', {}, { 'name' => \@names }, {}, {}, {}, \@includes);
	}
}

if (scalar(@names) == 0)
{
	print "No matching objects\n";
	exit;
}

if (!%set && !@addtonodegroup && !@removefromnodegroup)
{
	my %allvalues;

	foreach my $name (@names)
	{
		if (@allfields || @fields)
		{
			print "$name:\n";
			# if $showtags, remove the node_groups[name] and node_groups[tags][name] because doesn't fit this algorithm
			if ($showtags)
			{
				if (@allfields)
				{
					@allfields = remove_showtag_fields(@allfields);
				}
				elsif (@fields)
				{
					@fields = remove_showtag_fields(@fields);
				}
				tagprint($results{$name});
			}
			fieldprint([], $results{$name});
			print "\n";

		}
		elsif (@getallvalues)
		{
			# FIXME: This is a terribly inefficient implementation
			# A proper implementation would require something on the
			# server side to pull this out of the database efficiently
			foreach my $field (sort keys %{$results{$name}})
			{
				if (grep($_ eq $field, @getallvalues))
				{
					my $value = $results{$name}->{$field};
					next if !$value;
					$allvalues{$field}->{$value} = 1;
				}
			}
		}
		else
		{
			print $name, "\n";
		}
	}

	if (@getallvalues)
	{
		foreach my $field (@getallvalues)
		{
			print "$field:\n";
			foreach my $value (sort keys %{$allvalues{$field}})
			{
				print "  $value\n";
			}
			print "\n";
		}
	}
}

if (%set || $delete)
{
	if ($delete)
	{

		my $number_of_matching_entries = scalar(@names);
		print "\nThis will delete $number_of_matching_entries $objecttype.\n";
		print "\n";
                # iterate through each individual entry prompting verification cannot be bypassed with --yes either
		foreach my $key (keys(%results)) {
			# create individual hashes so will iterate through each at a time yet keeping hash structure levels 
		        my %tmphash;
			$tmphash{$key} = $results{$key};
				print "Deleting $key, continue?  [y/N]: \n";
	
			my $input = <STDIN>;
			if ($input !~ /^y/i)
			{
				print "Canceled\n";
				exit;
			}
			nVentory::Client::set_objects($objecttype, \%tmphash, \%set, $username, \&get_password);
		}
        }
        elsif ((!$yes) && (!$dryrun))
        {
		my $number_of_matching_entries = scalar(@names);
		my $entrystring = 'entry';
		$entrystring = 'entries' if ($number_of_matching_entries > 1);
		print "This will update $number_of_matching_entries",
			" $entrystring, continue?  [y/N]: ";

		my $input = <STDIN>;
		if ($input !~ /^y/i)
		{
			print "Canceled\n";
			exit;
		}
		nVentory::Client::set_objects($objecttype, \%results, \%set, $username, \&get_password);
	}
        else
        {
		my $number_of_matching_entries = scalar(@names);
		my $entrystring = 'entry';
		$entrystring = 'entries' if ($number_of_matching_entries > 1);
		if (!$yes || ($yes && $number_of_matching_entries > 1)) 
		{
			print "This will update $number_of_matching_entries",
				" $entrystring, continue?  [y/N]: ";
		
			my $input = <STDIN>;
			if ($input !~ /^y/i)
			{
				print "Canceled\n";
				exit;
			}
		}
		nVentory::Client::set_objects($objecttype, \%results, \%set, $username, \&get_password);
        }
}

if (@addtonodegroup)
{
	my %nodegroup_results = nVentory::Client::get_objects('node_groups', {}, {'name' => [@addtonodegroup]}, {}, {}, {}, ['nodes']);
	if (scalar keys %nodegroup_results != scalar @addtonodegroup)
	{
		warn "Not all requested node groups for 'addtonodegroup' were found:\n";
		warn "Requested:  ", join(', ', sort @addtonodegroup), "\n";
		warn "Found:  ", join(', ', sort keys %nodegroup_results), "\n";
		exit 1;
	}
	my $number_of_matching_entries = scalar(@names);
	my $entrystring = 'entry';
	$entrystring = 'entries' if ($number_of_matching_entries > 1);
	print "This will update $number_of_matching_entries",
		" $entrystring, continue?  [y/N]: ";

	my $input = <STDIN>;
	if ($input !~ /^y/i)
	{
		print "Canceled\n";
		exit;
	}
	nVentory::Client::add_nodes_to_nodegroups(\%results, \%nodegroup_results, $username, \&get_password);
}
if ($addcomment)
{
	my $number_of_matching_entries = scalar(@names);
	my $entrystring = 'entry';
	$entrystring = 'entries' if ($number_of_matching_entries > 1);
	print "This will update $number_of_matching_entries",
		" $entrystring, continue?  [y/N]: ";

	my $input = <STDIN>;
	if ($input !~ /^y/i)
	{
		print "Canceled\n";
		exit;
	}
	nVentory::Client::add_comment_to_obj($objecttype, \%results, $addcomment,  $username, \&get_password);
}
if (@removefromnodegroup)
{
	my %nodegroup_results = nVentory::Client::get_objects('node_groups', {}, {'name' => [@removefromnodegroup]}, {}, {}, {}, ['nodes']);
	if (scalar keys %nodegroup_results != scalar @removefromnodegroup)
	{
		warn "Not all requested node groups for 'removefromnodegroup' were found:\n";
		warn "Requested:  ", join(', ', sort @removefromnodegroup), "\n";
		warn "Found:  ", join(', ', sort keys %nodegroup_results), "\n";
		exit 1;
	}
        # iterate through each individual entry prompting verification cannot be bypassed with --yes either
	# create individual hashes so will iterate through each at a time yet keeping hash structure levels 
        my $numngs = scalar keys %nodegroup_results;
	my $numnodes = scalar keys %results;
	print "Deleting $numnodes entries from $numngs node_groups, continue?  [y/N]: \n";

	my $input = <STDIN>;
	if ($input !~ /^y/i)
	{
		print "Canceled\n";
		exit;
	}
	nVentory::Client::remove_nodes_from_nodegroups(\%results, \%nodegroup_results, $username, \&get_password);
}

#
# Subroutines
#

my $password;
sub get_password
{
	while (!$password)
	{
		system "stty -echo";
		print "Password: ";
		chomp($password = <STDIN>);
		print "\n";
		system "stty echo";
	}

	return $password;
}

# The results hash is a complex data structure.  This function
# does its best to render that in a human readable format.
sub fieldprint
{
	my ($fieldsref, $value) = @_;
	my @fieldnames = @$fieldsref;
	# fields=['name'] => 'name'
	# fields=['status', 'name'] => 'status[name]'
	my $fieldname = '';
	if (scalar @fieldnames > 0)
	{
		$fieldname .= $fieldnames[0];
		if (scalar @fieldnames > 1)
		{
			foreach my $f (@fieldnames[1..$#fieldnames])
			{
				$fieldname .= "[$f]";
			}
		}
	}

	if (ref $value eq 'HASH')
	{
		foreach my $subfield (sort keys %$value)
		{
			fieldprint([@fieldnames, $subfield], $value->{$subfield});
		}
	}
	elsif (ref $value eq 'ARRAY')
	{
		foreach my $entry (@$value)
		{
			fieldprint([@fieldnames], $entry);
		}
	}
	elsif (
		(@allfields && (!$allfields[0] || !grep(index($fieldname, $_) != -1, @allfields))) || 
		 (@fields && grep(index($fieldname, $_) != -1, @fields)))
	{
		print "$fieldname: $value\n";
	}
}

sub tagprint
{
	my %data = %{$_[0]};
	my $ref = $data{'node_groups'};
	foreach my $entry (@$ref)
	{
		my %data = %$entry;
		print "node_groups[name]: $data{'name'}\n";
		foreach my $tag (@{$data{'tags'}})
		{
			my %tagdata = %$tag;
			print "node_groups[tags][name]: " . $tagdata{'name'}. "\n";
		}
	}
}

sub remove_showtag_fields
{
	my @fieldsarr = @_;
	my @tmparr;
	if ((grep {$_ eq 'node_groups[tags][name]'} @fieldsarr) || (grep {$_ eq 'node_groups[name]'} @fieldsarr))
	{
		foreach my $tmpele (@fieldsarr) { 
			unless (($tmpele eq 'node_groups[tags][name]') || ($tmpele eq 'node_groups[name]'))
			{
				push(@tmparr, $tmpele) ;
			}
		}
	}
	else
	{
		@tmparr = @fieldsarr;
	}
	return @tmparr;
}
